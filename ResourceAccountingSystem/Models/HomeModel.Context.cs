//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ResourceAccountingSystem.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class HomeDataEntities : DbContext, IHomeModelContext
    {
        public HomeDataEntities()
            : base("name=HomeDataEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Counters> Counters { get; set; }
        public virtual DbSet<Houses> Houses { get; set; }
        public virtual DbSet<HouseCounterView> HouseCounterView { get; set; }

        public void MarkAsModified(Counters item)
        {
            Entry(item).State = EntityState.Modified;
        }

        public virtual int AddCounter(Nullable<int> idHouse, Nullable<int> serialNumber, Nullable<decimal> indication)
        {
            var idHouseParameter = idHouse.HasValue ?
                new ObjectParameter("IdHouse", idHouse) :
                new ObjectParameter("IdHouse", typeof(int));
    
            var serialNumberParameter = serialNumber.HasValue ?
                new ObjectParameter("SerialNumber", serialNumber) :
                new ObjectParameter("SerialNumber", typeof(int));
    
            var indicationParameter = indication.HasValue ?
                new ObjectParameter("Indication", indication) :
                new ObjectParameter("Indication", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddCounter", idHouseParameter, serialNumberParameter, indicationParameter);
        }
    
        public virtual int AddCounterOrInputIndicationOfIdHouse(Nullable<int> idHouse, Nullable<int> serialNumber, Nullable<decimal> indication)
        {
            var idHouseParameter = idHouse.HasValue ?
                new ObjectParameter("IdHouse", idHouse) :
                new ObjectParameter("IdHouse", typeof(int));
    
            var serialNumberParameter = serialNumber.HasValue ?
                new ObjectParameter("SerialNumber", serialNumber) :
                new ObjectParameter("SerialNumber", typeof(int));
    
            var indicationParameter = indication.HasValue ?
                new ObjectParameter("Indication", indication) :
                new ObjectParameter("Indication", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddCounterOrInputIndicationOfIdHouse", idHouseParameter, serialNumberParameter, indicationParameter);
        }
    
        public virtual int DeleteHouseWithCounter(Nullable<int> idHouse)
        {
            var idHouseParameter = idHouse.HasValue ?
                new ObjectParameter("IdHouse", idHouse) :
                new ObjectParameter("IdHouse", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteHouseWithCounter", idHouseParameter);
        }
    
        public virtual int InputIndicationByIdHouse(Nullable<int> idHouse, Nullable<decimal> indication)
        {
            var idHouseParameter = idHouse.HasValue ?
                new ObjectParameter("IdHouse", idHouse) :
                new ObjectParameter("IdHouse", typeof(int));
    
            var indicationParameter = indication.HasValue ?
                new ObjectParameter("Indication", indication) :
                new ObjectParameter("Indication", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InputIndicationByIdHouse", idHouseParameter, indicationParameter);
        }
    }
}
